module AnalyzingLanguages::TrackingSymbols::NestedScopes
  grammar CymbolNested
    rule program
      (
        blank
        /
        statement
        /
        method_definition
        /
        block
      )*
    end

    rule block
      "{"
      blank?
      statements:(
        (statement / block)
        blank?
      )*
      "}" <CymbolBlock>
    end

    rule statement
      (
        return
        /
        method_call
        /
        var_declaration
        /
        assignment
      )
      _?
      ";"
    end

    rule method_definition
      type:identifier _ name:identifier
      "(" _? parameters:parameter_list? _? ")" blank?
      body:block <MethodDefinition>
    end

    rule parameter_list
      first_parameter:method_parameter
      rest_parameters:(_? "," _? parameter:method_parameter)* <ParameterList>
    end

    rule method_parameter
      type:identifier _ name:identifier
    end

    rule return
      "return" _ additive_expression
    end

    rule method_call
      identifier "(" _? argument_list? _? ")"
    end

    rule argument_list
      method_argument  (_? "," _? method_argument)*
    end

    rule method_argument
      additive_expression
    end

    rule var_declaration
      type:identifier _ var_name:identifier initialization:var_initialization? <VarDeclaration>
    end

    rule var_initialization
      _? "=" _? additive_expression
    end

    rule assignment
      identifier _? "=" _? additive_expression
    end

    rule additive_expression
      expression _? ("+" _? expression)*
    end

    rule expression
      integer_literal
      /
      identifier
    end

    rule type
      "int" / "float"
    end

    rule identifier
      [a-z]+ <CymbolSymbol>
    end

    rule integer_literal
      [0-9]+
    end

    rule blank
      (_ "\n"? / _? comment_to_eol / "\n")+
    end

    rule comment_to_eol
      "//" (!"\n" .)* "\n"?
    end

    rule _
      [ \t]+
    end
  end
end